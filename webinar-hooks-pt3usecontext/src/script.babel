const { useState, useEffect, useRef, createContext, useContext } = React;

const loginUser = () =>
  new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve({
        username: "Joe Dever",
        id: "4baea1a4-0e99-457b-a987-de9f86f7c736",
        permissions: ["permission:p"]
      });
    }, 100);
  });

const logoutUser = () =>
  new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(defaultAuthCtxUser());
    }, 100);
  });

// The options to initialize a default AuthCtx
const defaultAuthCtxUser = () => {
  return {
    id: "",
    username: "",
    permissions: []
  };
};

class AuthCtx {
  constructor(_opts = defaultAuthCtxUser()) {}

  hasPermission(permission) {
    return (this._opts?.permissions || []).includes(permission);
  }

  userProfileName() {
    return this._opts?.username || "Nessuno";
  }

  setUser(user) {
    this._opts = user;
  }
}

const AuthContext = createContext(new AuthCtx());

const Component5 = () => {
  const user = useContext(AuthContext);
  return (
    <div className="max-w-md py-2 px-3 bg-white shadow-lg rounded-lg my-5 border-2">
      <h2 className="text-3xl leading-9 tracking-tight">{`Ciao ${
        user.userProfileName() || "Nessuno"
      }!`}</h2>
      {user.hasPermission("permission:p") && (
        <p>
          Ai piedi della collina il sentiero si biforca, ma entrambe le piste
          portano nel folto della foresta: se scegli il sentiero di destra vai
          al paragrafo 85, se scegli quello di sinistra al 275.
        </p>
      )}
    </div>
  );
};

const Component4 = () => {
  return (
    <div className="max-w-md py-2 px-3 bg-white shadow-lg rounded-lg my-5 border-2">
      <h2 className="text-3xl leading-9 tracking-tight">... 3</h2>
      <Component5 />
    </div>
  );
};

const Component3 = () => {
  return (
    <div className="max-w-lg py-2 px-3 bg-white shadow-lg rounded-lg my-5 border-2">
      <h2 className="text-3xl leading-9 tracking-tight">... 2</h2>
      <Component4 />
    </div>
  );
};

const Component2 = () => {
  return (
    <div className="max-w-md py-2 px-3 bg-white shadow-lg rounded-lg my-5 border-2">
      <h2 className="text-3xl leading-9 tracking-tight">... 1</h2>
      <Component3 />
    </div>
  );
};

const App = () => {
  const [auth, setAuth] = useState(new AuthCtx());
  const [logged, setLogged] = useState(false);
  const ref = useRef(null);

  useEffect(() => {
    // fingiamo la chiamata ad un API per l'utente
    if (!logged) {
      loginUser().then((u) => auth.setUser(u));
    } else {
      logoutUser().then((u) => auth.setUser(u));
    }
  }, [logged]);

  return (
    <AuthContext.Provider value={auth}>
      <div className="h-screen bg-gray-200 p-6">
        <h1 className="text-3xl leading-9 tracking-tight">{`Utente: ${
          auth.userProfileName() || "Nessuno"
        }`}</h1>
        <Component2 />
        <input
          ref={ref}
          id="auth-checkbox"
          type="checkbox"
          value=""
          class="mb-8 w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
          onClick={() => setLogged(ref.current.checked)}
        />
        <label
          for="auth-checkbox"
          class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300"
        >
          {" "}
          Toggle Utente
        </label>
      </div>
    </AuthContext.Provider>
  );
};

ReactDOM.render(<App />, document.getElementById("app"));
